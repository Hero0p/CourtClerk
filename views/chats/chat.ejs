<div class="container-fluid chat-container">
  <div class="row">
    <div class="col-md-12">
      <div class="card chat-card">
        <div class="card-header bg-light">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <% if (chat.type === 'lawyer') { %>
                <i class="fas fa-user-tie text-primary me-2"></i>
              <% } else { %>
                <i class="fas fa-balance-scale text-primary me-2"></i>
              <% } %>
              <h5 class="mb-0 chat-title" id="chatTitle"><%= chat.title %></h5>
              <button class="btn btn-sm btn-link edit-title-btn ms-2" id="editTitleBtn">
                <i class="fas fa-edit"></i>
              </button>
            </div>
            <div class="d-flex align-items-center">
              <% if (chat.type === 'lawyer' && chat.status !== 'completed') { %>
                <button class="btn btn-sm btn-success me-2" id="markAsDoneBtn" type="button">
                  <i class="fas fa-check me-1"></i> Mark as Done
                </button>
              <% } %>
              <button class="btn btn-sm btn-outline-danger" id="clearChatBtn" type="button">
                <i class="fas fa-trash me-1"></i> Clear Chat
              </button>
            </div>
          </div>
          
          <!-- Edit Title Form (Hidden by default) -->
          <form id="editTitleForm" class="mt-2 d-none">
            <div class="input-group">
              <input type="text" class="form-control" id="newTitle" value="<%= chat.title %>">
              <button class="btn btn-primary" type="submit">Save</button>
              <button class="btn btn-outline-secondary" type="button" id="cancelEditBtn">Cancel</button>
            </div>
          </form>
        </div>
        
        <div class="card-body chat-messages" id="chatMessages">
          <% if (chat.messages && chat.messages.length > 0) { %>
            <% chat.messages.forEach(message => { %>
              <% if (message.sender && message.sender._id && message.sender._id.toString() === user.id) { %>
                <!-- User Message -->
                <div class="message user-message">
                  <div class="message-content">
                    <div class="message-text"><%= message.content %></div>
                    <div class="message-time">
                      <%= new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                    </div>
                  </div>
                  <div class="message-avatar">
                    <img src="<%= user.profilePicture || '/images/default-avatar.png' %>" alt="User" class="rounded-circle">
                  </div>
                </div>
              <% } else if (chat.type === 'lawyer') { %>
                <!-- Lawyer Message -->
                <div class="message lawyer-message">
                  <div class="message-avatar">
                    <% if (message.sender && message.sender.profilePicture) { %>
                      <img src="<%= message.sender.profilePicture %>" alt="Lawyer" class="rounded-circle">
                    <% } else { %>
                      <div class="lawyer-avatar">
                        <i class="fas fa-user-tie"></i>
                      </div>
                    <% } %>
                  </div>
                  <div class="message-content">
                    <div class="message-sender">
                      <%= message.sender ? message.sender.name || 'Lawyer' : 'Lawyer' %>
                    </div>
                    <div class="message-text"><%- message.content.replace(/\n/g, '<br>') %></div>
                    <div class="message-time">
                      <%= new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                    </div>
                  </div>
                </div>
              <% } else { %>
                <!-- AI Legal Assistant Message -->
                <div class="message ai-message">
                  <div class="message-avatar">
                    <div class="ai-avatar">
                      <i class="fas fa-balance-scale"></i>
                    </div>
                  </div>
                  <div class="message-content legal-advice">
                    <div class="message-sender">
                      Legal AI Assistant
                    </div>
                    <div class="message-text"><%- message.content.replace(/\n/g, '<br>') %></div>
                    <div class="message-time">
                      <%= new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                    </div>
                  </div>
                </div>
              <% } %>
            <% }) %>
          <% } else { %>
            <div class="text-center text-muted empty-chat">
              <% if (chat.type === 'lawyer') { %>
                <i class="fas fa-user-tie fa-3x mb-3"></i>
                <p>Start your conversation with the lawyer. They will respond shortly.</p>
              <% } else { %>
                <i class="fas fa-balance-scale fa-3x mb-3"></i>
                <p>Welcome to your legal consultation. How can I assist you today?</p>
              <% } %>
            </div>
          <% } %>
        </div>
        
        <div class="card-footer">
          <form id="chatForm">
            <div class="input-group">
              <input 
                type="text" 
                id="messageInput" 
                class="form-control" 
                placeholder="Type your legal question here..." 
                autocomplete="off"
                required
              >
              <button class="btn btn-primary" type="submit" id="sendMessageBtn">
                <i class="fas fa-paper-plane"></i>
                <div class="spinner-border spinner-border-sm d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add this modal for clear chat confirmation -->
<div class="modal fade" id="clearChatModal" tabindex="-1" aria-labelledby="clearChatModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="clearChatModalLabel">Clear Chat History</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to clear this chat? This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmClearBtn">Clear Chat</button>
      </div>
    </div>
  </div>
</div>

<style>
  .chat-container {
    height: calc(100vh - 110px);
    padding: 20px;
    position: fixed;
    top: 70px;
    left: 250px;
    right: 20px;
    bottom: 20px;
    overflow: visible;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .chat-card {
    height: 100%;
    display: flex;
    flex-direction: column;
    margin-bottom: 0;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border-radius: 12px;
    border: none;
    overflow: hidden;
  }
  
  .card-header {
    flex-shrink: 0;
    background-color: #f8f9fa;
    border-bottom: 1px solid rgba(0,0,0,.125);
    padding: 1rem;
    border-radius: 12px 12px 0 0;
  }
  
  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    margin-bottom: 0;
    background-color: #ffffff;
    min-height: 200px;
    max-height: calc(100vh - 250px);
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
  }
  
  .card-footer {
    flex-shrink: 0;
    padding: 1rem;
    background-color: #f8f9fa;
    border-top: 1px solid rgba(0,0,0,.125);
    border-radius: 0 0 12px 12px;
    position: sticky;
    bottom: 0;
    z-index: 10;
    margin-top: auto;
  }
  
  .message {
    display: flex;
    margin-bottom: 1rem;
    max-width: 80%;
  }
  
  .user-message {
    margin-left: auto;
    flex-direction: row-reverse;
  }
  
  .ai-message {
    margin-right: auto;
  }
  
  .message-avatar {
    width: 40px;
    height: 40px;
    margin: 0 10px;
    flex-shrink: 0;
  }
  
  .message-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .ai-avatar {
    width: 100%;
    height: 100%;
    background-color: #4a90e2;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .message-content {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 15px;
    position: relative;
    max-width: 600px;
  }
  
  .user-message .message-content {
    background-color: #007bff;
    color: white;
  }
  
  .legal-advice {
    background-color: #f8f9fa;
    border-left: 4px solid #4a90e2;
  }
  
  .message-sender {
    font-weight: bold;
    margin-bottom: 5px;
    color: #4a90e2;
  }
  
  .message-text {
    line-height: 1.5;
  }
  
  .message-time {
    font-size: 0.75rem;
    color: #6c757d;
    text-align: right;
    margin-top: 5px;
  }
  
  .user-message .message-time {
    color: rgba(255, 255, 255, 0.8);
  }
  
  .empty-chat {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: calc(100vh - 350px);
    padding: 2rem;
    color: #6c757d;
  }
  
  .empty-chat i {
    font-size: 3.5rem;
    margin-bottom: 1.5rem;
    color: #4a90e2;
  }
  
  .empty-chat p {
    font-size: 1.1rem;
    margin-bottom: 0;
    text-align: center;
    max-width: 400px;
  }
  
  /* Input area styles */
  .input-group {
    background-color: #ffffff;
    border-radius: 0.375rem;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
  }
  
  .input-group .form-control {
    border: 1px solid #ced4da;
    border-right: none;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    line-height: 1.5;
    height: auto;
  }
  
  .input-group .btn {
    border-left: none;
    padding: 0.75rem 1.5rem;
  }
  
  /* Loading indicator for AI response */
  .typing-indicator {
    display: flex;
    align-items: center;
    margin: 10px 0;
  }
  
  .typing-indicator span {
    height: 8px;
    width: 8px;
    background-color: #4a90e2;
    border-radius: 50%;
    margin: 0 2px;
    display: inline-block;
    animation: bounce 1.4s infinite ease-in-out;
  }
  
  .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
  .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
  
  @keyframes bounce {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .chat-container {
      height: calc(100vh - 90px);
      top: 66px;
      left: 0;
      right: 0;
      bottom: 10px;
      padding: 10px;
    }
    
    .message {
      max-width: 90%;
    }
    
    .message-content {
      max-width: calc(100vw - 120px);
    }

    .chat-card {
      border-radius: 0;
    }

    .card-header {
      border-radius: 0;
      padding: 0.75rem;
    }

    .card-footer {
      border-radius: 0;
      padding: 0.75rem;
    }

    .empty-chat {
      min-height: 200px;
      padding: 1rem;
    }

    .empty-chat i {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .empty-chat p {
      font-size: 1rem;
    }
  }

  /* Add styles for larger screens */
  @media (min-width: 1400px) {
    .chat-container {
      left: calc(250px + (100vw - 1400px) / 2);
      right: calc(20px + (100vw - 1400px) / 2);
    }
  }

  /* Custom scrollbar styles */
  .chat-messages::-webkit-scrollbar {
    width: 6px;
  }

  .chat-messages::-webkit-scrollbar-track {
    background: transparent;
  }

  .chat-messages::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 3px;
  }

  /* Add these styles to the existing style section */
  .edit-title-btn {
    color: #6c757d;
    padding: 0.25rem 0.5rem;
    transition: color 0.2s;
  }

  .edit-title-btn:hover {
    color: #4a90e2;
  }

  #editTitleForm {
    transition: all 0.3s ease;
  }

  #editTitleForm .input-group {
    box-shadow: none;
  }

  #editTitleForm .form-control {
    border: 1px solid #ced4da;
    border-right: none;
  }

  #editTitleForm .btn {
    border: 1px solid #ced4da;
  }

  #editTitleForm .btn-primary {
    border-color: #0d6efd;
  }

  .lawyer-avatar {
    width: 40px;
    height: 40px;
    background-color: #1976d2;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lawyer-message .message-content {
    background-color: #e3f2fd;
    border-left: 4px solid #1976d2;
  }

  .lawyer-message .message-sender {
    color: #1976d2;
    font-weight: bold;
    margin-bottom: 5px;
  }

  #markAsDoneBtn {
    transition: all 0.3s ease;
  }

  #markAsDoneBtn:hover {
    background-color: #2e7d32;
  }

  .completed-banner {
    background-color: #4caf50;
    color: white;
    padding: 0.5rem;
    text-align: center;
    border-radius: 4px;
    margin-bottom: 1rem;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const socket = io();
  const chatForm = document.getElementById('chatForm');
  const messageInput = document.getElementById('messageInput');
  const chatMessages = document.getElementById('chatMessages');
  const chatId = '<%= chat._id %>';
  
  // Initialize Bootstrap Modal
  const clearChatModal = new bootstrap.Modal(document.getElementById('clearChatModal'), {
    keyboard: false,
    backdrop: 'static'
  });
  
  function scrollToBottom() {
    const scrollHeight = chatMessages.scrollHeight;
    const height = chatMessages.clientHeight;
    const maxScrollTop = scrollHeight - height;
    chatMessages.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;
  }
  
  scrollToBottom();
  
  function showTypingIndicator() {
    const div = document.createElement('div');
    div.className = 'message ai-message';
    div.id = 'typingIndicator';
    div.innerHTML = `
      <div class="message-avatar">
        <div class="ai-avatar">
          <i class="fas fa-balance-scale"></i>
        </div>
      </div>
      <div class="message-content">
        <div class="typing-indicator">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </div>
    `;
    chatMessages.appendChild(div);
    scrollToBottom();
  }
  
  function removeTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) {
      indicator.remove();
    }
  }
  
  const sendMessageBtn = document.getElementById('sendMessageBtn');
  let isSending = false;

  function setLoadingState(loading) {
    isSending = loading;
    const spinner = sendMessageBtn.querySelector('.spinner-border');
    const icon = sendMessageBtn.querySelector('.fa-paper-plane');
    
    messageInput.disabled = loading;
    sendMessageBtn.disabled = loading;
    
    if (loading) {
      spinner.classList.remove('d-none');
      icon.classList.add('d-none');
    } else {
      spinner.classList.add('d-none');
      icon.classList.remove('d-none');
    }
  }

  // Update chat form submission
  chatForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const message = messageInput.value.trim();
    if (!message || isSending) return;
    
    try {
      setLoadingState(true);
      
      // Add user message to UI immediately
      addMessageToUI(message, true);
      
      // Clear input
      messageInput.value = '';
      
      // Show typing indicator
      showTypingIndicator();
      
      // Send to server
      const response = await fetch(`/chats/${chatId}/message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
      });
      
      if (!response.ok) {
        throw new Error('Failed to send message');
      }
      
      const data = await response.json();
      
      if (data.success) {
        // Remove typing indicator
        removeTypingIndicator();
        // Add AI response to UI
        addMessageToUI(data.aiMessage.content, false);
      } else {
        throw new Error(data.error || 'Failed to process message');
      }
    } catch (error) {
      console.error('Error:', error);
      removeTypingIndicator();
      showNotification('Failed to send message. Please try again.', 'error');
      addErrorMessageToUI();
    } finally {
      setLoadingState(false);
      messageInput.focus();
    }
  });

  // Add keyboard shortcut for sending messages
  messageInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && !e.shiftKey && !isSending) {
      e.preventDefault();
      chatForm.dispatchEvent(new Event('submit'));
    }
  });
  
  // Clear chat functionality
  const clearChatBtn = document.getElementById('clearChatBtn');
  const confirmClearBtn = document.getElementById('confirmClearBtn');

  clearChatBtn.addEventListener('click', () => {
    clearChatModal.show();
  });

  confirmClearBtn.addEventListener('click', async () => {
    try {
      const response = await fetch(`/chats/${chatId}/clear`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();

      if (data.success) {
        // Clear messages from UI
        chatMessages.innerHTML = `
          <div class="text-center text-muted empty-chat">
            <i class="fas fa-balance-scale fa-3x mb-3"></i>
            <p>Welcome to your legal consultation. How can I assist you today?</p>
          </div>
        `;

        // Hide the modal
        clearChatModal.hide();

        // Show success message
        showNotification('Chat history cleared successfully', 'success');
      } else {
        throw new Error(data.error || 'Failed to clear chat');
      }
    } catch (error) {
      console.error('Error clearing chat:', error);
      showNotification('Failed to clear chat history', 'error');
    }
  });
  
  function addMessageToUI(content, isUser) {
    const div = document.createElement('div');
    const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    
    if (isUser) {
      div.className = 'message user-message';
      div.innerHTML = `
        <div class="message-content">
          <div class="message-text">${content}</div>
          <div class="message-time">${currentTime}</div>
        </div>
        <div class="message-avatar">
          <img src="<%= user.profilePicture || '/images/default-avatar.png' %>" alt="User" class="rounded-circle">
        </div>
      `;
    } else if ('<%= chat.type %>' === 'lawyer') {
      div.className = 'message lawyer-message';
      div.innerHTML = `
        <div class="message-avatar">
          <div class="lawyer-avatar">
            <i class="fas fa-user-tie"></i>
          </div>
        </div>
        <div class="message-content">
          <div class="message-sender">Lawyer</div>
          <div class="message-text">${content.replace(/\n/g, '<br>')}</div>
          <div class="message-time">${currentTime}</div>
        </div>
      `;
    } else {
      div.className = 'message ai-message';
      div.innerHTML = `
        <div class="message-avatar">
          <div class="ai-avatar">
            <i class="fas fa-balance-scale"></i>
          </div>
        </div>
        <div class="message-content legal-advice">
          <div class="message-sender">Legal AI Assistant</div>
          <div class="message-text">${content.replace(/\n/g, '<br>')}</div>
          <div class="message-time">${currentTime}</div>
        </div>
      `;
    }
    
    chatMessages.appendChild(div);
    scrollToBottom();
  }
  
  function addErrorMessageToUI() {
    const div = document.createElement('div');
    div.className = 'message ai-message';
    div.innerHTML = `
      <div class="message-avatar">
        <div class="ai-avatar">
          <i class="fas fa-exclamation-triangle"></i>
        </div>
      </div>
      <div class="message-content">
        <div class="message-sender">System</div>
        <div class="message-text text-danger">
          An error occurred while processing your request. Please try again.
        </div>
        <div class="message-time">
          ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
        </div>
      </div>
    `;
    chatMessages.appendChild(div);
    scrollToBottom();
  }

  function showNotification(message, type = 'info') {
    const notificationDiv = document.createElement('div');
    notificationDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
    notificationDiv.style.zIndex = '1050';
    notificationDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.body.appendChild(notificationDiv);

    // Remove notification after 3 seconds
    setTimeout(() => {
      notificationDiv.remove();
    }, 3000);
  }

  // Add a mutation observer to handle dynamic content changes
  const observer = new MutationObserver(scrollToBottom);
  observer.observe(chatMessages, {
    childList: true,
    subtree: true
  });

  // Add edit title functionality
  const editTitleBtn = document.getElementById('editTitleBtn');
  const editTitleForm = document.getElementById('editTitleForm');
  const chatTitle = document.getElementById('chatTitle');
  const newTitleInput = document.getElementById('newTitle');
  const cancelEditBtn = document.getElementById('cancelEditBtn');

  // Show edit form
  editTitleBtn.addEventListener('click', () => {
    chatTitle.classList.add('d-none');
    editTitleBtn.classList.add('d-none');
    editTitleForm.classList.remove('d-none');
    newTitleInput.value = chatTitle.textContent.trim();
    newTitleInput.focus();
  });

  // Cancel edit
  cancelEditBtn.addEventListener('click', () => {
    chatTitle.classList.remove('d-none');
    editTitleBtn.classList.remove('d-none');
    editTitleForm.classList.add('d-none');
  });

  // Submit new title
  editTitleForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const newTitle = newTitleInput.value.trim();
    if (!newTitle) return;

    try {
      const response = await fetch(`/chats/${chatId}/title`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title: newTitle })
      });

      if (!response.ok) {
        throw new Error('Failed to update title');
      }

      // Update title in UI
      chatTitle.textContent = newTitle;
      
      // Hide edit form
      chatTitle.classList.remove('d-none');
      editTitleBtn.classList.remove('d-none');
      editTitleForm.classList.add('d-none');
      
      // Show success notification
      showNotification('Chat title updated successfully', 'success');
    } catch (error) {
      console.error('Error updating title:', error);
      showNotification('Failed to update chat title', 'error');
    }
  });

  // Mark as Done functionality
  const markAsDoneBtn = document.getElementById('markAsDoneBtn');
  if (markAsDoneBtn) {
    markAsDoneBtn.addEventListener('click', async () => {
      try {
        const response = await fetch(`/chats/${chatId}/complete`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to mark chat as done');
        }

        const data = await response.json();

        if (data.success) {
          // Add completed banner
          const banner = document.createElement('div');
          banner.className = 'completed-banner';
          banner.innerHTML = '<i class="fas fa-check-circle me-2"></i> This consultation has been marked as completed';
          
          const cardHeader = document.querySelector('.card-header');
          cardHeader.insertAdjacentElement('afterend', banner);
          
          // Remove the mark as done button
          markAsDoneBtn.remove();
          
          // Show success notification
          showNotification('Chat marked as completed successfully', 'success');
          
          // Disable input if needed
          messageInput.disabled = true;
          sendMessageBtn.disabled = true;
          messageInput.placeholder = 'This chat has been marked as completed';
        } else {
          throw new Error(data.error || 'Failed to mark chat as done');
        }
      } catch (error) {
        console.error('Error marking chat as done:', error);
        showNotification('Failed to mark chat as done', 'error');
      }
    });
  }
});
</script> 