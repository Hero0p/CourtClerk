<%- include('../partials/header') %>

<div class="container-fluid chat-container">
  <div class="row">
    <div class="col-md-12">
      <div class="card chat-card">
        <div class="card-header bg-light">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <i class="fas fa-user-tie text-primary me-2"></i>
              <h5 class="mb-0 chat-title" id="chatTitle"><%= chat.title %></h5>
            </div>
            <div class="d-flex align-items-center">
              <% if (chat.status !== 'completed') { %>
                <button class="btn btn-sm btn-success me-2" id="markAsDoneBtn" type="button">
                  <i class="fas fa-check me-1"></i> Mark as Done
                </button>
              <% } %>
            </div>
          </div>
        </div>
        
        <div class="card-body chat-messages" id="chatMessages">
          <% if (chat.messages && chat.messages.length > 0) { %>
            <% chat.messages.forEach(message => { %>
              <% if (message.sender._id.toString() === user._id.toString()) { %>
                <!-- User Message -->
                <div class="message user-message">
                  <div class="message-content">
                    <div class="message-text"><%= message.content %></div>
                    <div class="message-time">
                      <%= new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                    </div>
                  </div>
                  <div class="message-avatar">
                    <img src="<%= user.profilePicture || '/images/default-avatar.png' %>" alt="User" class="rounded-circle">
                  </div>
                </div>
              <% } else { %>
                <!-- Lawyer Message -->
                <div class="message lawyer-message">
                  <div class="message-avatar">
                    <% if (message.sender.profilePicture) { %>
                      <img src="<%= message.sender.profilePicture %>" alt="Lawyer" class="rounded-circle">
                    <% } else { %>
                      <div class="lawyer-avatar">
                        <i class="fas fa-user-tie"></i>
                      </div>
                    <% } %>
                  </div>
                  <div class="message-content">
                    <div class="message-sender">
                      <%= message.sender.name || 'Lawyer' %>
                    </div>
                    <div class="message-text"><%- message.content.replace(/\n/g, '<br>') %></div>
                    <div class="message-time">
                      <%= new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                    </div>
                  </div>
                </div>
              <% } %>
            <% }) %>
          <% } else { %>
            <div class="text-center text-muted empty-chat">
              <i class="fas fa-user-tie fa-3x mb-3"></i>
              <p>Start your conversation with the lawyer. They will respond shortly.</p>
            </div>
          <% } %>
        </div>
        
        <div class="card-footer">
          <form id="chatForm">
            <div class="input-group">
              <input 
                type="text" 
                id="messageInput" 
                class="form-control" 
                placeholder="Type your message here..." 
                autocomplete="off"
                required
                <%= chat.status === 'completed' ? 'disabled' : '' %>
              >
              <button class="btn btn-primary" type="submit" id="sendMessageBtn" <%= chat.status === 'completed' ? 'disabled' : '' %>>
                <i class="fas fa-paper-plane"></i>
                <div class="spinner-border spinner-border-sm d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .chat-container {
    height: calc(100vh - 110px);
    padding: 20px;
    position: fixed;
    top: 70px;
    left: 250px;
    right: 20px;
    bottom: 20px;
    overflow: visible;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .chat-card {
    height: 100%;
    display: flex;
    flex-direction: column;
    margin-bottom: 0;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border-radius: 12px;
    border: none;
    overflow: hidden;
  }
  
  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    margin-bottom: 0;
    background-color: #ffffff;
    min-height: 200px;
    max-height: calc(100vh - 250px);
  }
  
  .message {
    display: flex;
    margin-bottom: 1rem;
    max-width: 80%;
  }
  
  .user-message {
    margin-left: auto;
    flex-direction: row-reverse;
  }
  
  .lawyer-message {
    margin-right: auto;
  }
  
  .message-avatar {
    width: 40px;
    height: 40px;
    margin: 0 10px;
    flex-shrink: 0;
  }
  
  .message-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
  }
  
  .lawyer-avatar {
    width: 100%;
    height: 100%;
    background-color: #1976d2;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .message-content {
    padding: 15px;
    border-radius: 15px;
    position: relative;
  }
  
  .user-message .message-content {
    background-color: #007bff;
    color: white;
  }
  
  .lawyer-message .message-content {
    background-color: #e3f2fd;
    border-left: 4px solid #1976d2;
  }
  
  .message-sender {
    color: #1976d2;
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .message-time {
    font-size: 0.75rem;
    color: #6c757d;
    text-align: right;
    margin-top: 5px;
  }
  
  .user-message .message-time {
    color: rgba(255, 255, 255, 0.8);
  }
  
  .completed-banner {
    background-color: #4caf50;
    color: white;
    padding: 0.5rem;
    text-align: center;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  @media (max-width: 768px) {
    .chat-container {
      left: 0;
      right: 0;
      padding: 10px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const socket = io();
  const chatForm = document.getElementById('chatForm');
  const messageInput = document.getElementById('messageInput');
  const chatMessages = document.getElementById('chatMessages');
  const chatId = '<%= chat._id %>';
  
  function scrollToBottom() {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
  
  scrollToBottom();
  
  const sendMessageBtn = document.getElementById('sendMessageBtn');
  let isSending = false;

  function setLoadingState(loading) {
    isSending = loading;
    const spinner = sendMessageBtn.querySelector('.spinner-border');
    const icon = sendMessageBtn.querySelector('.fa-paper-plane');
    
    messageInput.disabled = loading;
    sendMessageBtn.disabled = loading;
    
    if (loading) {
      spinner.classList.remove('d-none');
      icon.classList.add('d-none');
    } else {
      spinner.classList.add('d-none');
      icon.classList.remove('d-none');
    }
  }

  chatForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const message = messageInput.value.trim();
    if (!message || isSending) return;
    
    try {
      setLoadingState(true);
      
      // Add user message to UI immediately
      addMessageToUI(message, true);
      
      // Clear input
      messageInput.value = '';
      
      // Send to server
      const response = await fetch(`/chats/${chatId}/message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message, type: 'lawyer' })
      });
      
      if (!response.ok) {
        throw new Error('Failed to send message');
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to send message');
      }
    } catch (error) {
      console.error('Error:', error);
      showNotification('Failed to send message. Please try again.', 'error');
    } finally {
      setLoadingState(false);
      messageInput.focus();
    }
  });

  function addMessageToUI(content, isUser) {
    const div = document.createElement('div');
    const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    
    if (isUser) {
      div.className = 'message user-message';
      div.innerHTML = `
        <div class="message-content">
          <div class="message-text">${content}</div>
          <div class="message-time">${currentTime}</div>
        </div>
        <div class="message-avatar">
          <img src="<%= user.profilePicture || '/images/default-avatar.png' %>" alt="User" class="rounded-circle">
        </div>
      `;
    }
    
    chatMessages.appendChild(div);
    scrollToBottom();
  }

  function showNotification(message, type = 'info') {
    const notificationDiv = document.createElement('div');
    notificationDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
    notificationDiv.style.zIndex = '1050';
    notificationDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.body.appendChild(notificationDiv);

    setTimeout(() => {
      notificationDiv.remove();
    }, 3000);
  }

  // Mark as Done functionality
  const markAsDoneBtn = document.getElementById('markAsDoneBtn');
  if (markAsDoneBtn) {
    markAsDoneBtn.addEventListener('click', async () => {
      try {
        const response = await fetch(`/chats/${chatId}/complete`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to mark chat as done');
        }

        const data = await response.json();

        if (data.success) {
          // Add completed banner
          const banner = document.createElement('div');
          banner.className = 'completed-banner';
          banner.innerHTML = '<i class="fas fa-check-circle me-2"></i> This consultation has been marked as completed';
          
          const cardHeader = document.querySelector('.card-header');
          cardHeader.insertAdjacentElement('afterend', banner);
          
          // Remove the mark as done button
          markAsDoneBtn.remove();
          
          // Show success notification
          showNotification('Chat marked as completed successfully', 'success');
          
          // Disable input
          messageInput.disabled = true;
          sendMessageBtn.disabled = true;
          messageInput.placeholder = 'This chat has been marked as completed';
        } else {
          throw new Error(data.error || 'Failed to mark chat as done');
        }
      } catch (error) {
        console.error('Error marking chat as done:', error);
        showNotification('Failed to mark chat as done', 'error');
      }
    });
  }

  // Socket events for real-time messaging
  socket.on('connect', () => {
    socket.emit('join-chat', chatId);
  });

  socket.on('new-message', (message) => {
    if (message.sender._id !== '<%= user._id %>') {
      const div = document.createElement('div');
      div.className = 'message lawyer-message';
      div.innerHTML = `
        <div class="message-avatar">
          ${message.sender.profilePicture ? 
            `<img src="${message.sender.profilePicture}" alt="Lawyer" class="rounded-circle">` :
            `<div class="lawyer-avatar"><i class="fas fa-user-tie"></i></div>`
          }
        </div>
        <div class="message-content">
          <div class="message-sender">${message.sender.name || 'Lawyer'}</div>
          <div class="message-text">${message.content.replace(/\n/g, '<br>')}</div>
          <div class="message-time">
            ${new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
          </div>
        </div>
      `;
      chatMessages.appendChild(div);
      scrollToBottom();
    }
  });
});
</script>

<%- include('../partials/footer') %> 